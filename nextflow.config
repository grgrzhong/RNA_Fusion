// Nextflow DSL2 configuration
nextflow.enable.dsl = 2

// Disable the DSL2 warning
nextflow.enable.configProcessNamesValidation = false

// Generla params settings
params {
    publish_dir_mode      = "copy"
    save_trimmed_fastq    = true
    outdir                = "${launchDir}/results"
    container_dir         = "${launchDir}/containers"    
    reference_dir         = "/mnt/f/projects/250702_RNA_fusion/reference"
}

// Profile settings: to be used for local and HPC computers
profiles {

    // Local computer, adjusted for local runs
    local {
        
        process.executor = "local"

        singularity {
            enabled = true
            autoMounts = true
            runOptions = '--contain --cleanenv'
            cacheDir = "/home/zhonggr/projects/250224_DFSP_WES/containers/singularity"
            pullTimeout = '2h'

        }

        // Set local machine parameters
        params {
            max_memory = 48.GB      // Reserve 12GB for system
            max_cpus = 16           // Reserve 4CPUs for system
            max_time = 168.h        // Run 7 days
        }

        // Default resources for all processes
        process {
            cpus = 2
            memory = 4.GB
            
            // Error handling
            errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'finish' }
            maxRetries = 3
        }
        
        // Execution control for local runs
        executor {
            // Run only <queueSize> tasks in parallel
            // Limit parallel tasks based on your system capacity
            queueSize = 16  
        }
    }
    
    // HKU HPC: submit nextflow as job as there is limitation of 
    hpc {
        process.executor = "local"
        // process.executor = "slurm"
        // process.queue = 'normal'
        // process.clusterOptions = '--qos=normal --partition=amd'
        
        apptainer {
            enabled = true
            pullTimeout = "2h"
            autoMounts = true
            cacheDir = "/home/zhonggr/projects/250224_DFSP_WES/containers/singularity"
        }

        // Default resources for all processes
        process {
            cpus = {1 * task.attempt }
            memory = { 2.GB * task.attempt }
            
            // Error handling
            errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
            maxRetries = 3
        }

        // Queue limit to avoid overwhelming the scheduler
        executor {
            queueSize = 60
            // queueStatInterval = '1 min' // Check queue status every minute
            // submitRateLimit   = '10 sec' // Wait 10 seconds between job submissions
        }
    }
}

// // Include the configs
includeConfig "conf/base.config"
includeConfig "conf/container.config"
includeConfig "conf/genome.config"
includeConfig "conf/module.config"


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
    if (type == 'memory') {
        try {
            if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
                return params.max_memory as nextflow.util.MemoryUnit
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'time') {
        try {
            if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
                return params.max_time as nextflow.util.Duration
            else
                return obj
        } catch (all) {
            println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
            return obj
        }
    } else if (type == 'cpus') {
        try {
            return Math.min( obj, params.max_cpus as int )
        } catch (all) {
            println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
            return obj
        }
    }
}
